#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <string>
#include <windows.h>
#include <iostream>
#include <conio.h>
#include <sstream>
#include <math.h>
#include "GL/freeglut.h"
#include <gl/glut.h>
#include<stdio.h>
#include<stdlib.h>
#include <GL/glut.h>
#include<math.h>
#include<time.h>
#include<windows.h>
#include "BMP.h"
#include <gl/glut.h>

#define PI 3.1416

int w = 600, h = 600;
double rx = 0.0, ry = 0.0, rz = 0.0, px = 0, py = 0, pz = 0;

float anglMercurio = 0.0, anglVenus = 0.0, anglTierra = 0.0, anglLuna = 0.0, anglMarte = 0.0, anglJupiter = 0.0,
anglSaturno = 0.0, anglNeptuno = 0.0, anglUrano = 0.0, anglPluton = 0.0;



GLfloat sx = 0.2, sy = 0.2, sz = 0.2;




GLfloat negro[] = { 0.0f,0.0f,0.0f,1.0f };
GLfloat amarillo[] = { 0.7f,0.2f,0.0f,1.0f };
GLfloat Ambiente[] = { 0.1,0.1,0.1,1.0 };
GLfloat Difusa[] = { 1.0,1.0,1.0,1.0 };
GLfloat Especular[] = { .50,.50,.50,.10 };
GLfloat Posicion[] = { 0,0,0,0.1 };
GLfloat sc[9] = { 0.295, 0.4, 0.5, 0.6, 0,7, 0.75, 0.8, 0.85 };
GLuint texture_id[11];



double ang = 2 * PI / 300;
double angular = 2 * PI / 50;
int rota_sol = 0;
int rota_tierra = 0;
int rota_mercurio = 0;
int rota_venus = 0;
int rota_luna = 0;
int rota_marte = 0;
int rota_jupiter = 0;
int rota_saturno = 0;
int rota_nepturno = 0;
int rota_urano = 0;
int rota_pluton = 0;

void reshape(int w, int h) {

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60, (GLfloat)h / (GLfloat)w, 1, 300);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

}

void initLighting()
{
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT7);



    glLightfv(GL_LIGHT7, GL_AMBIENT, Ambiente);
    glLightfv(GL_LIGHT7, GL_DIFFUSE, Difusa);
    glLightfv(GL_LIGHT7, GL_SPECULAR, Especular);



    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);



    glEnable(GL_TEXTURE_2D);



    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glGenTextures(10, texture_id);



    glBindTexture(GL_TEXTURE_2D, texture_id[0]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\sol_1.bmp");



    glBindTexture(GL_TEXTURE_2D, texture_id[1]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\mercurio.bmp");



    glBindTexture(GL_TEXTURE_2D, texture_id[2]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\venus.bmp");



    glBindTexture(GL_TEXTURE_2D, texture_id[3]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\tierra.bmp");



    glBindTexture(GL_TEXTURE_2D, texture_id[4]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\luna.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[5]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\marte.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[6]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\jupiter.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[7]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\saturno.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[8]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\neptuno.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[9]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\urano.bmp");


    glBindTexture(GL_TEXTURE_2D, texture_id[10]);
    LoadBMP("C:Users\DECF\Documents\Septimo semestre\Computacion grafica\texturas\pluton.bmp");
    


    glDisable(GL_TEXTURE_2D);
}

void myinit()
{
    glClearColor(0.0, 0.0, 0.0, 0.0); //backgroundcolor es verde
    //gluOrtho2D(0,699,0,699);
    glPointSize(1.0);
    glLineWidth(2.0);
    glShadeModel(GL_FLAT);
    glEnable(GL_DEPTH_TEST);

}



void background()
{

    glColor3f(0.0, 0.00, 0.00);
    glVertex3f(-01.00, 01.00, 1);
    glColor3f(.20, 0.0, 0.70);
    glVertex3f(01.00, 1.00, 1);
    glColor3f(0, 0.0, 0.0);
    glVertex3f(1.00, -1.00, 1);
    glColor3f(.70, .10, .20);
    glVertex3f(-1.00, -1.00, 1);
    glEnd();
}



void orbita()
{
    glColor3f(0.5, 0.5, 0.5);



    int i = 0;
    for (i = 0; i < 10; i++) {
        glPushMatrix();
        if (i == 5)
        {
            glRotatef(45, 1.0, 0.0, 0.0);
        }
        else
        {
            glRotatef(63, 1.0, 0.0, 0.0);
        }
        glScalef(sc[i], sc[i], sc[i]);
        glBegin(GL_POINTS);
        double ang1 = 0.0;
        int i = 0;
        for (i = 0; i < 300; i++)
        {
            glVertex2d(cos(ang1), sin(ang1));
            ang1 += ang;
        }
        glEnd();
        glPopMatrix();
    }
}



void esfera(double radio, int longitud, int latitud)
{
    GLUquadricObj* q = gluNewQuadric();
    gluQuadricDrawStyle(q, GLU_FILL);
    gluQuadricNormals(q, GLU_SMOOTH);
    gluQuadricTexture(q, GL_TRUE);
    gluSphere(q, radio, longitud, latitud);
    gluDeleteQuadric(q);
}



void draw(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(-10 + rx, 9 + ry, -10 + rz, px, py, pz, 0.0, 1.0, 0.0);
    background();
    orbita();
    glPushMatrix();
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_TEXTURE_2D);


     //sol
     glPushMatrix();
     glColor3f(0.7, 0.5, 0.0);
     glScalef(sx, sy, sz);
     glLightfv(GL_LIGHT7, GL_POSITION, Posicion);
     glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, amarillo);
     glRotatef(rota_sol, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glBindTexture(GL_TEXTURE_2D, texture_id[0]);
     esfera(1, 50, 50);//Sol
     glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, negro);
     glPopMatrix();
     glDisable(GL_TEXTURE_2D);

     //Mercurio
     glEnable(GL_TEXTURE_2D);
     glScalef(0.2, 0.2, 0.2);
     glPushMatrix();
     glRotatef(anglMercurio, 0.0, 1.0, -0.5);
     glTranslatef(1.5, 0.0, 0.0);
     glRotatef(rota_mercurio, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.9, 0.0);
     glScalef(0.08, 0.08, 0.08);
     glBindTexture(GL_TEXTURE_2D, texture_id[1]);
     esfera(1, 50, 50);//Mercurio
     glPopMatrix();



     //VENUS
     glPushMatrix();
     glRotatef(anglVenus, 0.0, 1.0, -0.5);
     glTranslatef(2, 0.0, 0.0);
     glRotatef(rota_venus, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(0.0, 0.9, 0.7);
     glScalef(0.09, 0.09, 0.09);
     glBindTexture(GL_TEXTURE_2D, texture_id[2]);
     esfera(1, 50, 50);//Venus
     glPopMatrix();



     //TIERRA
     glPushMatrix();
     glRotatef(anglTierra, 0.0, 1.0, -0.5);
     glTranslatef(2.5, 0.0, 0.0);
     glRotatef(rota_tierra, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glPushMatrix();
     glColor3f(0.0, 0.1, 0.7);
     glScalef(0.23, 0.23, 0.23);
     glBindTexture(GL_TEXTURE_2D, texture_id[3]);
     esfera(1, 50, 50);//Tierra
     glPopMatrix();


     //LUNA
     glRotatef(anglLuna, 0.0, 1.0, 0.05);
     glTranslatef(0.5, 0.0, 0.0);
     glRotatef(rota_tierra, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glPushMatrix();
     glColor3f(1.0, 1.0, 1.0);
     glScalef(0.125, 0.125, 0.125);
     glBindTexture(GL_TEXTURE_2D, texture_id[4]);
     esfera(0.5, 50, 50);//Luna
     glPopMatrix();
     glPopMatrix();

     //MARTE
     glPushMatrix();
     glRotatef(anglMarte, 0.0, 1.0, -0.5);
     glTranslatef(3, 0.0, 0.0);
     glRotatef(rota_marte, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.0, 0.0);
     glScalef(0.09, 0.09, 0.09);
     glBindTexture(GL_TEXTURE_2D, texture_id[5]);
     esfera(1, 50, 50);//Marte
     glPopMatrix();


     //JUPITER
     glPushMatrix();
     glRotatef(anglJupiter, 0.0, 1.0, -0.5);
     glTranslatef(3.5, 0.0, 0.0);
     glRotatef(rota_jupiter, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.9, 0.0);
     glScalef(0.23, 0.23, 0.23);
     glBindTexture(GL_TEXTURE_2D, texture_id[6]);
     esfera(1, 50, 50);//Jupiter
     glPopMatrix();
 
 //SATURNO
    glPushMatrix();
    glRotatef(anglSaturno, 0.0, 1.0, -0.5);
    glTranslatef(4, 0.0, 0.0);
    glRotatef(rota_saturno, 0, 1, 0);
    glRotatef(90, 1, 0, 0);
    glColor3f(1.0, 0.9, 0.0);
    glScalef(0.15, 0.15, 0.15);
    glBindTexture(GL_TEXTURE_2D, texture_id[7]);
    esfera(1, 50, 50);//Saturno
    glPushMatrix();
    glColor3f(1, 1, 1);
    glRotatef(10, 1, 0, 0);
    glutSolidTorus(0.10, 1.3, 12.0, 35.0);
    glPopMatrix();
    glPopMatrix();



    //NEPTUNO
     glPushMatrix();
     glRotatef(anglNeptuno, 0.0, 1.0, -0.5);
     glTranslatef(4.5, 0.0, 0.0);
     glRotatef(rota_nepturno, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.9, 0.0);
     glScalef(0.1, 0.1, 0.1);
     glBindTexture(GL_TEXTURE_2D, texture_id[8]);
     esfera(1, 50, 50);//Nepturno
     glPopMatrix();


     //URANO
     glPushMatrix();
     glRotatef(anglUrano, 0.0, 1.0, -0.5);
     glTranslatef(5, 0.0, 0.0);
     glRotatef(rota_urano, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.9, 0.0);
     glScalef(0.07, 0.07, 0.07);
     glBindTexture(GL_TEXTURE_2D, texture_id[9]);
     esfera(1, 50, 50);//Urano
     glPopMatrix();


     //PLUTON
     glPushMatrix();
     glRotatef(anglPluton, 0.0, 1.0, -0.5);
     glTranslatef(5.5, 0.0, 0.0);
     glRotatef(rota_pluton, 0, 1, 0);
     glRotatef(90, 1, 0, 0);
     glColor3f(1.0, 0.9, 0.0);
     glScalef(0.06, 0.06, 0.06);
     glBindTexture(GL_TEXTURE_2D, texture_id[10]);
     esfera(1, 50, 50);//Pluton
     glPopMatrix();




    glDisable(GL_TEXTURE_2D);



    glPopMatrix();
    glFlush();
}



void update(int value) {



    anglMercurio += 2;
    if (anglMercurio > 360) {
        anglMercurio -= 360;
    }



    anglVenus += 2.0;
    if (anglVenus > 360) {
        anglVenus -= 360;
    }



    anglTierra += 0.7;
    if (anglTierra > 360) {
        anglTierra -= 360;
    }




    anglLuna += 2;
    if (anglLuna > 360) {
        anglLuna -= 360;
    }

    anglMarte += 1.5;
    if (anglMarte > 360) {
        anglMarte -= 360;
    }

    anglJupiter += 1.0;
    if (anglJupiter > 360) {
        anglJupiter -= 360;
    }

    anglSaturno += 1.5;
    if (anglSaturno > 360) {
        anglSaturno -= 360;
    }

    anglNeptuno += 1.7;
    if (anglNeptuno > 360) {
        anglNeptuno -= 360;
    }

    anglUrano += 1.3;
    if (anglUrano > 360) {
        anglUrano -= 360;
    }

    anglPluton += 1.0;
    if (anglPluton > 360) {
        anglPluton -= 360;
    }

    rota_sol = (rota_sol + 1) % 360;
    rota_tierra = (rota_tierra + 2) % 360;
    rota_jupiter = (rota_jupiter + 2) % 360;
    rota_mercurio = (rota_mercurio + 2) % 360;
    rota_venus = (rota_venus + 2) % 360;
    rota_marte = (rota_marte + 2) % 360;
    rota_saturno = (rota_saturno + 2) % 360;
    rota_nepturno = (rota_nepturno + 2) % 360;
    rota_urano = (rota_urano + 2) % 360;
    rota_pluton = (rota_pluton + 2) % 360;





    glutPostRedisplay();
    glutTimerFunc(20, update, 0);
}

void keyboard(unsigned char key, int x, int y) {

    switch (key) {
        // eje x 
    case 'd':
        rx = rx + 0.2;
        break;
    case 'a':
        rx = rx - 0.2;
        break;

    case 'l':
        px = px + 0.2;
        break;

    case 'j':
        px = px - 0.2;
        break;
        // eje y
    case 'q':
        ry = ry + 0.2;
        break;

    case 'e':
        ry = ry - 0.2;
        break;

    case 'u':
        py = py + 0.2;
        break;

    case 'o':
        py = py - 0.2;
        break;

        // eje z 

    case 'w':
        rz = rz + 0.2;
        break;

    case 's':
        rz = rz - 0.2;
        break;

    case 49: //1
        ry = ry + 0.2;
        py = py + 0.2;
        break;

    case 50: //1
        ry = ry - 0.2;
        py = py - 0.2;
        break;


    case 27: //scape
        exit(0);
        break;


    }

    glutPostRedisplay();

}

void flechas(int key, int x, int y) {

    switch (key)
    {

    case GLUT_KEY_RIGHT:
        rx = rx + 0.2;
        px = px + 0.2;
        break;

    case GLUT_KEY_LEFT:
        rx = rx - 0.2;
        px = px - 0.2;
        break;

    case GLUT_KEY_UP:
        rz = rz + 0.2;
        pz = pz + 0.2;
        break;

    case GLUT_KEY_DOWN:
        rz = rz - 0.2;
        pz = pz - 0.2;
        break;

    }
    glutPostRedisplay();


}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(w, h);
    glutCreateWindow("Sistema Solar");
    initLighting();
    myinit();
    glutSpecialFunc(flechas);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutDisplayFunc(draw);
    glutTimerFunc(25, update, 0);
    glutMainLoop();
    return 0;
}
